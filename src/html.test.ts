// tslint:disable:max-line-length
import {assert} from "chai";
import {Annotation} from "./annotation";
import {renderToString} from "./html";

describe("renderToString", () => {

  it("Returns text directly with no annotations", () => {
    assert.equal(renderToString("Foo", [], {autoParagraph: false}), "Foo");
  });

  it("Returns auto-generated paragraph breaks by default", () => {
    assert.equal(renderToString("Foo\nBar", []),
`<p data-sharpie-start="0" data-sharpie-end="3" data-sharpie-warp="1" class="sharpie-annotation sharpie-type-markup sharpie-id-0 auto-para-break">Foo</p><p data-sharpie-start="3" data-sharpie-end="7" data-sharpie-warp="1" class="sharpie-annotation sharpie-type-markup sharpie-id-1 auto-para-break">
Bar</p>`);
  });

  it("Returns custom markup annotations", () => {
    const atns: Annotation[] = [
      {start: 1, end: 5, type: "markup", format: {color: "blue"}},
    ];
    assert.equal(renderToString("Testing annotation", atns, {autoParagraph: false}),
`T<span data-sharpie-start="1" data-sharpie-end="5" data-sharpie-warp="1" style="color: blue;" class="sharpie-annotation sharpie-type-markup sharpie-id-0">esti</span>ng annotation`);
  });

  it("Correctly closes and reopens overlapping markup annotations", () => {
    const atns: Annotation[] = [
      {start: 1, end: 5, type: "markup", format: {color: "blue"}},
      {start: 3, end: 9, type: "markup", format: {bgColor: "green"}},
    ];
    assert.equal(renderToString("Testing annotation", atns, {autoParagraph: false}),
`T<span data-sharpie-start="1" data-sharpie-end="5" data-sharpie-warp="1" style="color: blue;" class="sharpie-annotation sharpie-type-markup sharpie-id-0">es<span data-sharpie-start="3" data-sharpie-end="5" data-sharpie-warp="1" style="background-color: green;" class="sharpie-annotation sharpie-type-markup sharpie-id-1">ti</span></span><span data-sharpie-start="5" data-sharpie-end="9" data-sharpie-warp="1" style="background-color: green;" class="sharpie-annotation sharpie-type-markup sharpie-id-1">ng a</span>nnotation`);
  });

  it("Handles complicated stacks of overlapping and autogenerated markup annotations", () => {
    const atns: Annotation[] = [
      {start: 1, end: 10, type: "markup", format: {color: "blue"}},
      {start: 5, end: 6, type: "markup", meta: {htmlTagName: "em"}},
      {start: 5, end: 15, type: "markup", format: {bgColor: "green"}},
      {start: 3, end: 25, type: "markup", format: {opacity: 0.5}},
      {start: 14, end: 25, type: "markup", meta: {htmlTagName: "strong", htmlClassName: "test"}},
    ];
    const str = `This test checks that

the renderer can handle
complicated

stacks of custom annotations and auto-generated

paragraph annotations.`;

    assert.equal(renderToString(str, atns),
`<p data-sharpie-start="0" data-sharpie-end="21" data-sharpie-warp="1" class="sharpie-annotation sharpie-type-markup sharpie-id-0 auto-para-break">T<span data-sharpie-start="1" data-sharpie-end="10" data-sharpie-warp="1" style="color: blue;" class="sharpie-annotation sharpie-type-markup sharpie-id-1">hi<span data-sharpie-start="3" data-sharpie-end="10" data-sharpie-warp="1" style="opacity: 0.5;" class="sharpie-annotation sharpie-type-markup sharpie-id-2">s <em data-sharpie-start="5" data-sharpie-end="6" data-sharpie-warp="1" class="sharpie-annotation sharpie-type-markup sharpie-id-3"><span data-sharpie-start="5" data-sharpie-end="6" data-sharpie-warp="1" style="background-color: green;" class="sharpie-annotation sharpie-type-markup sharpie-id-4">t</span></em><span data-sharpie-start="6" data-sharpie-end="10" data-sharpie-warp="1" style="background-color: green;" class="sharpie-annotation sharpie-type-markup sharpie-id-4">est </span></span></span><span data-sharpie-start="10" data-sharpie-end="15" data-sharpie-warp="1" style="background-color: green;" class="sharpie-annotation sharpie-type-markup sharpie-id-4"><span data-sharpie-start="10" data-sharpie-end="15" data-sharpie-warp="1" style="opacity: 0.5;" class="sharpie-annotation sharpie-type-markup sharpie-id-2">chec<strong data-sharpie-start="14" data-sharpie-end="15" data-sharpie-warp="1" class="sharpie-annotation sharpie-type-markup sharpie-id-5 test">k</strong></span></span><strong data-sharpie-start="15" data-sharpie-end="21" data-sharpie-warp="1" class="sharpie-annotation sharpie-type-markup sharpie-id-5 test"><span data-sharpie-start="15" data-sharpie-end="21" data-sharpie-warp="1" style="opacity: 0.5;" class="sharpie-annotation sharpie-type-markup sharpie-id-2">s that</span></strong></p><p data-sharpie-start="21" data-sharpie-end="22" data-sharpie-warp="1" class="sharpie-annotation sharpie-type-markup sharpie-id-6 auto-para-break"><span data-sharpie-start="21" data-sharpie-end="22" data-sharpie-warp="1" style="opacity: 0.5;" class="sharpie-annotation sharpie-type-markup sharpie-id-2"><strong data-sharpie-start="21" data-sharpie-end="22" data-sharpie-warp="1" class="sharpie-annotation sharpie-type-markup sharpie-id-5 test">
</strong></span></p><p data-sharpie-start="22" data-sharpie-end="46" data-sharpie-warp="1" class="sharpie-annotation sharpie-type-markup sharpie-id-7 auto-para-break"><strong data-sharpie-start="22" data-sharpie-end="25" data-sharpie-warp="1" class="sharpie-annotation sharpie-type-markup sharpie-id-5 test"><span data-sharpie-start="22" data-sharpie-end="25" data-sharpie-warp="1" style="opacity: 0.5;" class="sharpie-annotation sharpie-type-markup sharpie-id-2">
th</span></strong>e renderer can handle</p><p data-sharpie-start="46" data-sharpie-end="58" data-sharpie-warp="1" class="sharpie-annotation sharpie-type-markup sharpie-id-8 auto-para-break">
complicated</p><p data-sharpie-start="58" data-sharpie-end="59" data-sharpie-warp="1" class="sharpie-annotation sharpie-type-markup sharpie-id-9 auto-para-break">
</p><p data-sharpie-start="59" data-sharpie-end="107" data-sharpie-warp="1" class="sharpie-annotation sharpie-type-markup sharpie-id-10 auto-para-break">
stacks of custom annotations and auto-generated</p><p data-sharpie-start="107" data-sharpie-end="108" data-sharpie-warp="1" class="sharpie-annotation sharpie-type-markup sharpie-id-11 auto-para-break">
</p><p data-sharpie-start="108" data-sharpie-end="131" data-sharpie-warp="1" class="sharpie-annotation sharpie-type-markup sharpie-id-12 auto-para-break">
paragraph annotations.</p>`);
  });

  it("Handles directly overlapping ranges without reopening tags, with correct block tag sorting", () => {
    const atns: Annotation[] = [
      {start: 0, end: 6, type: "markup", meta: {htmlTagName: "h1"}},
      {start: 0, end: 6, type: "highlight"},
    ];
    const str = `Header

Some other text`;
    assert.equal(renderToString(str, atns),
`<p data-sharpie-start="0" data-sharpie-end="6" data-sharpie-warp="1" class="sharpie-annotation sharpie-type-markup sharpie-id-0 auto-para-break"><h1 data-sharpie-start="0" data-sharpie-end="6" data-sharpie-warp="1" class="sharpie-annotation sharpie-type-markup sharpie-id-1"><span data-sharpie-start="0" data-sharpie-end="6" data-sharpie-warp="1" style="background-color: #fffa129c;" class="sharpie-annotation sharpie-type-highlight sharpie-id-2">Header</span></h1></p><p data-sharpie-start="6" data-sharpie-end="7" data-sharpie-warp="1" class="sharpie-annotation sharpie-type-markup sharpie-id-3 auto-para-break">
</p><p data-sharpie-start="7" data-sharpie-end="23" data-sharpie-warp="1" class="sharpie-annotation sharpie-type-markup sharpie-id-4 auto-para-break">
Some other text</p>`);
  });

  it("Forces reopenings for inline tags trying to contain block tags", () => {
    const atns: Annotation[] = [
      {start: 0, end: 10, type: "markup", meta: {htmlTagName: "span"}},
      {start: 4, end: 6, type: "markup", meta: {htmlTagName: "h1"}},
    ];
    const str = `0123456789`;
    assert.equal(renderToString(str, atns, {autoParagraph: false}),
`<span data-sharpie-start="0" data-sharpie-end="4" data-sharpie-warp="1" class="sharpie-annotation sharpie-type-markup sharpie-id-0">0123</span><h1 data-sharpie-start="4" data-sharpie-end="6" data-sharpie-warp="1" class="sharpie-annotation sharpie-type-markup sharpie-id-1"><span data-sharpie-start="4" data-sharpie-end="6" data-sharpie-warp="1" class="sharpie-annotation sharpie-type-markup sharpie-id-0">45</span></h1><span data-sharpie-start="6" data-sharpie-end="10" data-sharpie-warp="1" class="sharpie-annotation sharpie-type-markup sharpie-id-0">6789</span>`);
  });

  it("Forces reopenings for highlights trying to contain redactions", () => {
    const atns: Annotation[] = [
      {start: 0, end: 10, type: "highlight"},
      {start: 4, end: 6, type: "redaction"},
    ];
    const str = `0123456789`;
    assert.equal(renderToString(str, atns, {autoParagraph: false}),
`<span data-sharpie-start="0" data-sharpie-end="4" data-sharpie-warp="1" style="background-color: #fffa129c;" class="sharpie-annotation sharpie-type-highlight sharpie-id-0">0123</span><span data-sharpie-start="4" data-sharpie-end="6" data-sharpie-warp="1" style="background-color: #000000; color: white; opacity: 0.8; white-space: pre-wrap; word-break: break-word;" class="sharpie-annotation sharpie-type-redaction sharpie-id-1"><span data-sharpie-start="4" data-sharpie-end="6" data-sharpie-warp="1" style="background-color: #fffa129c;" class="sharpie-annotation sharpie-type-highlight sharpie-id-0">&nbsp;&nbsp;</span></span><span data-sharpie-start="6" data-sharpie-end="10" data-sharpie-warp="1" style="background-color: #fffa129c;" class="sharpie-annotation sharpie-type-highlight sharpie-id-0">6789</span>`);
  });

});
